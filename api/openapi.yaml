openapi: 3.0.0
info:
    description: |
        This is the API documentation for blog.ly.

        # Authentication

        blog.ly supports authentication with OAuth2.0.

    version: 1.0.0
    title: blog.ly
    contact:
        url: https://github.com/bjia56/coms4156
    license:
        name: MIT
        url: https://github.com/bjia56/coms4156/blob/main/LICENSE
servers:
    - url: http://localhost:8080
      description: Test server
tags:
    - name: blog
      description: Operations on blogs
    - name: user
      description: Operations on users
    - name: following
      description: Operations on following users
    - name: search
      description: Operations on searching for blogs
    - name: user_model
      x-displayName: The User Model
      description: |
          <SchemaDefinition schemaRef="#/components/schemas/User" />
    - name: blog_model
      x-displayName: The Blog Model
      description: |
          <SchemaDefinition schemaRef="#/components/schemas/Blog" />
    - name: searchresult_model
      x-displayName: The Search Result Model
      description: |
          <SchemaDefinition schemaRef="#/components/schemas/SearchResult" />
x-tagGroups:
    - name: General
      tags:
          - blog
          - user
    - name: Actions
      tags:
          - follow
          - search
    - name: Models
      tags:
          - user_model
          - blog_model
          - searchresult_model
paths:
    /api/blogs:
        get:
            tags:
                - blog
            summary: Get a list of blogs
            operationId: apiBlogsGET
            x-eov-operation-id: apiBlogsGET
            x-eov-operation-handler: controllers/BlogController
            parameters:
                - name: author
                  in: query
                  description: Fetch blogs by author uuid.
                  required: false
                  schema:
                      type: integer
                - name: cursor
                  in: query
                  description: Cursor token for paging the blogs returned.
                  required: false
                  schema:
                      type: string
                - name: limit
                  in: query
                  description: Maximum number of results to return in a page.
                  required: false
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 100
                      default: 10
            responses:
                '200':
                    description: Success. Returns a list of blog uuids.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    uuids:
                                        type: array
                                        items:
                                            type: integer
        post:
            tags:
                - blog
            summary: Create a new blog
            description: This can only be done by users who have logged in.
            operationId: apiBlogsPOST
            x-eov-operation-id: apiBlogsPOST
            x-eov-operation-handler: controllers/BlogController
            responses:
                '201':
                    description:
                        A new blog was created successfully. Returns the blog
                        uuid of the new blog.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    uuid:
                                        type: integer
                '401':
                    description: Unauthenticated. The user is not logged in.
    '/api/blogs/{uuid}':
        get:
            tags:
                - blog
            summary: Get blog details
            operationId: apiBlogsUuidGET
            x-eov-operation-id: apiBlogsUuidGET
            x-eov-operation-handler: controllers/BlogController
            parameters:
                - name: uuid
                  in: path
                  description: Blog uuid.
                  required: true
                  schema:
                      type: integer
            responses:
                '200':
                    description: Success. Returns a blog object.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Blog'
        put:
            tags:
                - blog
            summary: Update an existing blog
            description:
                This can only be done by users who have logged in and on blogs
                that the user has authored.
            operationId: apiBlogsUuidPUT
            x-eov-operation-id: apiBlogsUuidPUT
            x-eov-operation-handler: controllers/BlogController
            parameters:
                - name: uuid
                  in: path
                  description: Blog uuid.
                  required: true
                  schema:
                      type: integer
            responses:
                '200':
                    description: Success.
                '401':
                    description: Unauthenticated. The user is not logged in.
                '403':
                    description:
                        Unauthorized. The user does not have permissions to
                        modify the given blog.
                '404':
                    description: Blog not found.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateBlog'
        delete:
            tags:
                - blog
            summary: Delete an existing blog
            description:
                This can only be done by users who have logged in and on blogs
                that the user has authored.
            operationId: apiBlogsUuidDELETE
            x-eov-operation-id: apiBlogsUuidDELETE
            x-eov-operation-handler: controllers/BlogController
            parameters:
                - name: uuid
                  in: path
                  description: Blog uuid.
                  required: true
                  schema:
                      type: integer
            responses:
                '200':
                    description: Success.
                '401':
                    description: Unauthenticated. The user is not logged in.
                '403':
                    description:
                        Unauthorized. The user does not have permissions to
                        modify the given blog.
                '404':
                    description: Blog not found.
    /api/user:
        get:
            tags:
                - user
            summary: Get user information
            operationId: apiUserGET
            x-eov-operation-id: apiUserGET
            x-eov-operation-handler: controllers/UserController
            parameters:
                - name: user
                  in: query
                  description: User uuid.
                  required: true
                  schema:
                      type: integer
            responses:
                '200':
                    description: Success.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '404':
                    description: User not found.
        put:
            tags:
                - user
            summary: Update user information
            description: This can only be done by users who have logged in.
            operationId: apiUserPUT
            x-eov-operation-id: apiUserPUT
            x-eov-operation-handler: controllers/UserController
            responses:
                '200':
                    description: Success.
                '401':
                    description: Unauthenticated. The user is not logged in.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateUser'
    /api/follow:
        post:
            tags:
                - follow
            summary: Add a follow entry
            description: This can only be done by users who have logged in.
            operationId: apiFollowPOST
            x-eov-operation-id: apiFollowPOST
            x-eov-operation-handler: controllers/FollowController
            parameters:
                - name: user
                  in: query
                  description: User uuid.
                  required: true
                  schema:
                      type: integer
            responses:
                '200':
                    description: Success.
                '401':
                    description: Unauthenticated. The user is not logged in.
        delete:
            tags:
                - follow
            summary: Delete a follow entry
            description: This can only be done by users who have logged in.
            operationId: apiFollowDELETE
            x-eov-operation-id: apiFollowDELETE
            x-eov-operation-handler: controllers/FollowController
            parameters:
                - name: user
                  in: query
                  description: User uuid.
                  required: true
                  schema:
                      type: integer
            responses:
                '200':
                    description: Success.
                '401':
                    description: Unauthenticated. The user is not logged in.
                '404':
                    description:
                        The current logged-in user is not following the target
                        user.
    /api/search:
        get:
            tags:
                - search
            summary: Search for blogs
            operationId: apiSearchGET
            x-eov-operation-id: apiSearchGET
            x-eov-operation-handler: controllers/SearchController
            parameters:
                - name: keyword
                  in: query
                  description: Keyword(s) to search for
                  required: true
                  schema:
                      type: string
                - name: cursor
                  in: query
                  description: Cursor token for paging the blogs returned.
                  required: false
                  schema:
                      type: string
                - name: limit
                  in: query
                  description: Maximum number of results to return in a page.
                  required: false
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 100
                      default: 10
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/SearchResult'
components:
    schemas:
        Blog:
            type: object
            properties:
                uuid:
                    description: Blog uuid
                    type: integer
                title:
                    description: Blog title
                    type: string
                contents:
                    description: Blog contents in raw Markdown
                    type: string
                rendered:
                    description: Blog contents in rendered HTML
                    type: string
                created:
                    description: Blog creation datetime
                    type: integer
                updated:
                    description: Blog last updated datetime
                    type: integer
                author:
                    description: Blog author uuid
                    type: integer
                authorName:
                    description: Blog author name
                    type: string
        User:
            type: object
            properties:
                uuid:
                    description: User uuid
                    type: integer
                username:
                    description: User username
                    type: string
                name:
                    description: User name
                    type: string
                description:
                    description: User description ("About Me")
                    type: string
                notificationPreference:
                    description: Notification preference (TBD)
                    type: string
        SearchResult:
            type: object
            properties:
                blog:
                    description: Blog uuid
                    type: integer
                author:
                    description: Author uuid
                    type: integer
                hits:
                    description: Total hits
                    type: integer
        UpdateBlog:
            type: object
            properties:
                title:
                    description: Blog title
                    type: string
                contents:
                    description: Blog contents in raw Markdown
                    type: string
        UpdateUser:
            type: object
            properties:
                name:
                    description: User name
                    type: string
                description:
                    description: User description ("About Me")
                    type: string
                notificationPreference:
                    description: Notification preference (TBD)
                    type: string
